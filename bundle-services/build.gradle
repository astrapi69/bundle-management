dependencies {
    implementation project(":bundle-entities")
    implementation project(":bundle-mappers")
    implementation project(":bundle-viewmodels")

    implementation("io.github.astrapi69:generic-mapper:$genericMapperVersion")
    implementation("io.github.astrapi69:data-api:$dataApiVersion")
    implementation("io.github.astrapi69:ent-core:$entCoreVersion")
    implementation("io.github.astrapi69:jobj-core:$jobjCoreVersion")
    implementation("io.github.astrapi69:silly-jdbc:$sillyJdbcVersion")
    implementation("io.github.astrapi69:silly-collections:$sillyCollectionsVersion")
    implementation("io.github.astrapi69:silly-beans:$sillyBeansVersion")
    implementation("io.github.astrapi69:resourcebundle-core:$resourcebundleCoreVersion")
    implementation("io.github.astrapi69:jobj-copy:$jobjCopyVersion")
    implementation("io.github.astrapi69:xml-extensions:$xmlExtensionsVersion")
    implementation("io.github.astrapi69:throw-able:$throwAbleVersion")
    implementation("io.github.astrapi69:spring-tool-extensions:$springToolExtensionsVersion")
    implementation("io.github.astrapi69:spring-boot-extensions:$springBootExtensionsVersion")
    implementation("com.thoughtworks.xstream:xstream:$xstreamVersion")
    implementation("org.apache.commons:commons-lang3:$commonsLang3Version")
    implementation("org.postgresql:postgresql")
    implementation("org.flywaydb:flyway-core"){
        exclude module: "spring-boot-starter-logging"
        exclude module: "logback-classic"
    }
    implementation("org.springframework:spring-oxm"){
        exclude module: "spring-boot-starter-logging"
        exclude module: "logback-classic"
    }
    implementation("org.springframework.boot:spring-boot-starter-web"){
        exclude module: "spring-boot-starter-logging"
        exclude module: "logback-classic"
    }
    implementation("org.springframework.boot:spring-boot-starter-actuator"){
        exclude module: "spring-boot-starter-logging"
        exclude module: "logback-classic"
    }
    implementation("org.springframework.boot:spring-boot-starter-aop"){
        exclude module: "spring-boot-starter-logging"
        exclude module: "logback-classic"
    }
    implementation("org.springframework.boot:spring-boot-starter-data-jpa"){
        exclude module: "spring-boot-starter-logging"
        exclude module: "logback-classic"
    }
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor"){
        exclude module: "spring-boot-starter-logging"
        exclude module: "logback-classic"
    }
    testImplementation("org.springframework.boot:spring-boot-starter-test"){
        exclude module: "spring-boot-starter-logging"
        exclude module: "logback-classic"
    }
}

license {
    ext.year = "$projectInceptionYear"
    ext.owner = "$projectLeaderName"
    ignoreFailures = true
    header rootProject.file('src/main/resources/LICENSE.txt')
    excludes(["**/README",
              "**/README.md",
              "**/LICENSE",
              "**/NOTICE",
              "**/*.yml",
              "**/*.xml",
              "**/*.xsl",
              "**/*.xsd",
              "**/*.dtd",
              "**/*.html",
              "**/*.jsp",
              "**/*.jpa",
              "**/*.sql",
              "**/*.properties",
              "**/*.bat",
              "**/*.gradle",
              "**/*.MF",
              "**/*.txt",
              "**/*.vm",
              "**/*.log",
              "**/*.map",
              "**/*.js.map",
              "**/*.tmpl",
              "**/*.js.tmpl",
              "**/*.editorconfig",
              "**/*.lombok.config",
              "src/test/resources/**",
              "src/main/resources/**",
              "out/**",
              "build/**"])
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from(sourceSets.main.allJava)
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set("javadoc")
    javadoc.properties.failOnError = false
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
    dependsOn delombok
    failOnError = false
    exclude 'io/github/astrapi69/bundlemanagement/**'
}

def releaseVersion = !version.endsWith("SNAPSHOT")

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "$project.name"
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = "$project.name"
                description = "$projectSerivcesDescription"
                url = "$projectScmProviderUrl" + "$projectHolderUsername" + "/" + "$rootProject.name"
                organization {
                    name = "$projectOrganizationName"
                    url = "$projectOrganizationUrl"
                }
                issueManagement {
                    system = "$projectIssueManagementSystem"
                    url = "$projectScmProviderUrl" + "$projectHolderUsername" + "/" + "$rootProject.name" + "/issues"
                }
                licenses {
                    license {
                        name = "$projectLicenseName"
                        url = "$projectLicenseUrl"
                        distribution = "$projectLicenseDistribution"
                    }
                }
                developers {
                    developer {
                        id = "$projectHolderUsername"
                        name = "$projectLeaderName"
                    }
                }
                scm {
                    connection = "$projectScmGitUrlPrefix" + "$projectScmProviderDomain" + ":" + "$projectHolderUsername" + "/" + "$rootProject.name" + ".git"
                    developerConnection = "$projectScmGitUrlPrefix" + "$projectScmProviderDomain" + ":" + "$projectHolderUsername" + "/" + "$rootProject.name" + ".git"
                    url = "$projectScmGitUrlPrefix" + "$projectScmProviderDomain" + ":" + "$projectHolderUsername" + "/" + "$rootProject.name" + ".git"
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username System.getenv("$projectRepositoriesUserNameKey") ?: project.property("$projectRepositoriesUserNameKey")
                password System.getenv("$projectRepositoriesPasswordKey") ?: project.property("$projectRepositoriesPasswordKey")
            }
            def releasesRepoUrl = "$projectRepositoriesReleasesRepoUrl"
            def snapshotsRepoUrl = "$projectRepositoriesSnapshotsRepoUrl"
            url = releaseVersion ? releasesRepoUrl : snapshotsRepoUrl
        }
    }
}

signing {
    if (releaseVersion) {
        sign publishing.publications.mavenJava
    }
}
