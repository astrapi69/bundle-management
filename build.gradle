
buildscript {
	repositories {
		mavenCentral()
		google()
		jcenter()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "com.github.ben-manes:gradle-versions-plugin:0.27.0"
		classpath "gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.15.0"
		classpath "io.franzbecker:gradle-lombok:4.0.0"
		classpath "org.springframework.boot:spring-boot-gradle-plugin:2.3.0.RELEASE"
		classpath "io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE"
		classpath "net.ltgt.gradle:gradle-apt-plugin:0.21"
	}
}

apply plugin: "io.spring.dependency-management"
apply plugin: "org.springframework.boot"
apply plugin: "application"

allprojects {
	group = "$groupPackage"
	version = "$projectVersion"
}



subprojects {
	apply plugin: "signing"
	apply plugin: "java"
	apply plugin: "jacoco"
	apply plugin: "maven-publish"
	apply plugin: "com.github.ben-manes.versions"
	apply plugin: "com.github.hierynomus.license"
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: "net.ltgt.apt-idea"
	apply plugin: "org.springframework.boot"
	apply plugin: "io.spring.dependency-management"
	apply plugin: "io.franzbecker.gradle-lombok"

	dependencies {
		compileOnly("org.projectlombok:lombok:$lombokVersion")
		annotationProcessor("org.projectlombok:lombok:$lombokVersion")
		implementation("de.alpharogroup:generic-mapper:$genericMapperVersion")
		implementation("de.alpharogroup:ent-api:$entApiVersion")
		implementation("de.alpharogroup:ent-core:$entCoreVersion")
		implementation("de.alpharogroup:silly-jdbc:$sillyJdbcVersion")
		implementation("de.alpharogroup:silly-collections:$sillyCollectionsVersion")
		implementation("de.alpharogroup:resourcebundle-core:$resourcebundleCoreVersion")
		implementation("de.alpharogroup:jobj-copy:$jobjCopyVersion")
		implementation("de.alpharogroup:xml-extensions:$xmlExtensionsVersion")
		implementation("de.alpharogroup:throw-able:$throwAbleVersion")
		implementation("de.alpharogroup:spring-tool-extensions:$springToolExtensionsVersion")
		implementation("de.alpharogroup:spring-boot-extensions:$springBootExtensionsVersion")
		implementation("io.springfox:springfox-swagger2:$springfoxSwaggerVersion")
		implementation("io.springfox:springfox-swagger-ui:$springfoxSwaggerVersion")
		implementation("com.thoughtworks.xstream:xstream:$xstreamVersion")
		implementation("org.apache.commons:commons-lang3:$commonsLang3Version")
		implementation("org.postgresql:postgresql")
		implementation("org.flywaydb:flyway-core")
		implementation("org.springframework:spring-oxm")
		implementation("org.springframework.boot:spring-boot-starter-web")
		implementation("org.springframework.boot:spring-boot-starter-actuator")
		implementation("org.springframework.boot:spring-boot-starter-aop")
		implementation("org.springframework.boot:spring-boot-starter-data-jpa")
		annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
		testImplementation("org.springframework.boot:spring-boot-starter-test")
	}

	repositories {
		jcenter()
		mavenLocal()
		mavenCentral()
	}

	// workhack for license issue #76
	gradle.startParameter.excludedTaskNames += "licenseMain"
	gradle.startParameter.excludedTaskNames += "licenseTest"

	description = "$rootProject.name"
	sourceCompatibility = "$projectSourceCompatibility"

	javadoc {
		if(JavaVersion.current().isJava9Compatible()) {
			options.addBooleanOption("html5", true)
		}
	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}

	test {
		useJUnitPlatform()
	}

	jacocoTestReport {
		reports {
			xml.enabled true
			html.enabled false
		}
	}

	check.dependsOn jacocoTestReport

}
